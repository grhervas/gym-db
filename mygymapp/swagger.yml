swagger: "2.0"
info:
  description: This is the swagger file that goes with our server code
  version: "1.0.0"
  title: Gym Database REST API
consumes:
  - application/json
produces:
  - application/json

basePath: /api

# Paths supported by the server application
paths:
  /programs:
    get:
      operationId: api_functions.read_all_programs
      tags:
        - Programs
      summary: Read the entire list of programs, sorted by start date
      description: Read the list of programs, sorted by start date
      # parameters:
      #   - name: length
      #     in: query
      #     type: integer
      #     description: Number of programs to get
      #     required: false
      #   - name: offset
      #     in: query
      #     type: integer
      #     description: Offset from beginning of list where to start gathering programs
      #     required: false
      responses:
        200:
          description: Successfully read programs list operation
          schema:
            type: array
            items:
              properties:
                program_desc:
                  type: string
                  description: Program name
                date_start:
                  type: string
                  description: Start date of program
                date_end:
                  type: string
                  description: End date of program
                program_id:
                  type: string
                  description: Program db identifier
                objective:
                  type: string
                  description: Program functional objectives

    post:
      operationId: api_functions.create_program
      tags:
        - Programs
      summary: Create a program
      description: Create a new program
      parameters:
        - name: program
          in: body
          description: Program to create
          required: True
          schema:
            type: object
            properties:
              program_desc:
                  type: string
                  description: Program name to create
              date_start:
                type: string
                description: Start date of program to create
              date_end:
                type: string
                description: End date of program to create
              program_id:
                type: string
                description: Program db identifier to create
              objective:
                type: string
                description: Program functional objectives to create
      responses:
        201:
          description: Successfully created program
          schema:
            properties:
              program_id:
                type: string
                description: ID of program
              program_desc:
                  type: string
                  description: Program name
              date_start:
                type: string
                description: Start date of program
              date_end:
                type: string
                description: End date of program
              program_id:
                type: string
                description: Program db identifier
              objective:
                type: string
                description: Program functional objectives
              

  # /people/{lname}:
  #   get:
  #     operationId: people.read_one
  #     tags:
  #       - People
  #     summary: Read one person from the people list
  #     description: Read one person from the people list
  #     parameters:
  #       - name: lname
  #         in: path
  #         description: Last name of the person to get from the list
  #         type: string
  #         required: True
  #     responses:
  #       200:
  #         description: Successfully read person from people list operation
  #         schema:
  #           properties:
  #             fname:
  #               type: string
  #             lname:
  #               type: string
  #             timestamp:
  #               type: string

  #   put:
  #     operationId: people.update
  #     tags:
  #       - People
  #     summary: Update a person in the people list
  #     description: Update a person in the people list
  #     parameters:
  #       - name: lname
  #         in: path
  #         description: Last name of the person to update in the list
  #         type: string
  #         required: True
  #       - name: person
  #         in: body
  #         schema:
  #           type: object
  #           properties:
  #             fname:
  #               type: string
  #             lname:
  #               type: string
  #     responses:
  #       200:
  #         description: Successfully updated person in people list

  #   delete:
  #     operationId: people.delete
  #     tags:
  #       - People
  #     summary: Delete a person from the people list
  #     description: Delete a person
  #     parameters:
  #       - name: lname
  #         in: path
  #         type: string
  #         required: True
  #     responses:
  #       200:
  #         description: Successfully deleted a person from people list